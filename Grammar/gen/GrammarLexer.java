package gen;// Generated from C:/Users/frede/Documents/GitHub/P4/Grammar\Grammar.g4 by ANTLR 4.5.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class GrammarLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, OR=28, AND=29, EQ=30, NEQ=31, GT=32, LT=33, 
		GTEQ=34, LTEQ=35, PLUS=36, MINUS=37, MULT=38, DIV=39, MOD=40, NOT=41, 
		ID=42, NUM=43, BOOL=44, STRING=45, TYPE=46, COMMENT=47, SPACE=48;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", 
		"PLUS", "MINUS", "MULT", "DIV", "MOD", "NOT", "ID", "NUM", "BOOL", "STRING", 
		"TYPE", "COMMENT", "SPACE"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'Tankname'", "';'", "'Setup'", "'Repeat'", "'Action'", "'('", "')'", 
		"'Function'", "'returns'", "'{'", "'}'", "','", "'When'", "'='", "'if'", 
		"'else'", "'repeat'", "'while'", "'return'", "'print('", "'run'", "'Tank.'", 
		"'Gun.'", "'Radar.'", "'Battlefield.'", "'Math.'", "'Event.'", "'OR'", 
		"'AND'", "'IS='", "'NOT='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", 
		"LTEQ", "PLUS", "MINUS", "MULT", "DIV", "MOD", "NOT", "ID", "NUM", "BOOL", 
		"STRING", "TYPE", "COMMENT", "SPACE"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public GrammarLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Grammar.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\62\u0166\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\2\3\2"+
		"\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3"+
		"\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r"+
		"\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\21"+
		"\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30"+
		"\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\37"+
		"\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3"+
		"&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\7+\u0120\n+\f+\16+\u0123\13+\3,\6"+
		",\u0126\n,\r,\16,\u0127\3,\3,\6,\u012c\n,\r,\16,\u012d\5,\u0130\n,\3-"+
		"\3-\3-\3-\3-\3-\3-\3-\3-\5-\u013b\n-\3.\3.\7.\u013f\n.\f.\16.\u0142\13"+
		".\3.\3.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u0153\n/\3\60\3\60\3"+
		"\60\3\60\7\60\u0159\n\60\f\60\16\60\u015c\13\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\61\3\61\3\61\3\61\2\2\62\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13"+
		"\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61"+
		"\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61"+
		"a\62\3\2\b\4\2aac|\5\2C\\aac|\3\2\62;\3\2$$\5\2)),,\61\61\5\2\13\f\17"+
		"\17\"\"\u016e\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2"+
		"\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2"+
		"\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2"+
		"\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2"+
		"\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3"+
		"\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2"+
		"\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2"+
		"S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3"+
		"\2\2\2\2a\3\2\2\2\3c\3\2\2\2\5l\3\2\2\2\7n\3\2\2\2\tt\3\2\2\2\13{\3\2"+
		"\2\2\r\u0082\3\2\2\2\17\u0084\3\2\2\2\21\u0086\3\2\2\2\23\u008f\3\2\2"+
		"\2\25\u0097\3\2\2\2\27\u0099\3\2\2\2\31\u009b\3\2\2\2\33\u009d\3\2\2\2"+
		"\35\u00a2\3\2\2\2\37\u00a4\3\2\2\2!\u00a7\3\2\2\2#\u00ac\3\2\2\2%\u00b3"+
		"\3\2\2\2\'\u00b9\3\2\2\2)\u00c0\3\2\2\2+\u00c7\3\2\2\2-\u00cb\3\2\2\2"+
		"/\u00d1\3\2\2\2\61\u00d6\3\2\2\2\63\u00dd\3\2\2\2\65\u00ea\3\2\2\2\67"+
		"\u00f0\3\2\2\29\u00f7\3\2\2\2;\u00fa\3\2\2\2=\u00fe\3\2\2\2?\u0102\3\2"+
		"\2\2A\u0107\3\2\2\2C\u0109\3\2\2\2E\u010b\3\2\2\2G\u010e\3\2\2\2I\u0111"+
		"\3\2\2\2K\u0113\3\2\2\2M\u0115\3\2\2\2O\u0117\3\2\2\2Q\u0119\3\2\2\2S"+
		"\u011b\3\2\2\2U\u011d\3\2\2\2W\u0125\3\2\2\2Y\u013a\3\2\2\2[\u013c\3\2"+
		"\2\2]\u0152\3\2\2\2_\u0154\3\2\2\2a\u0162\3\2\2\2cd\7V\2\2de\7c\2\2ef"+
		"\7p\2\2fg\7m\2\2gh\7p\2\2hi\7c\2\2ij\7o\2\2jk\7g\2\2k\4\3\2\2\2lm\7=\2"+
		"\2m\6\3\2\2\2no\7U\2\2op\7g\2\2pq\7v\2\2qr\7w\2\2rs\7r\2\2s\b\3\2\2\2"+
		"tu\7T\2\2uv\7g\2\2vw\7r\2\2wx\7g\2\2xy\7c\2\2yz\7v\2\2z\n\3\2\2\2{|\7"+
		"C\2\2|}\7e\2\2}~\7v\2\2~\177\7k\2\2\177\u0080\7q\2\2\u0080\u0081\7p\2"+
		"\2\u0081\f\3\2\2\2\u0082\u0083\7*\2\2\u0083\16\3\2\2\2\u0084\u0085\7+"+
		"\2\2\u0085\20\3\2\2\2\u0086\u0087\7H\2\2\u0087\u0088\7w\2\2\u0088\u0089"+
		"\7p\2\2\u0089\u008a\7e\2\2\u008a\u008b\7v\2\2\u008b\u008c\7k\2\2\u008c"+
		"\u008d\7q\2\2\u008d\u008e\7p\2\2\u008e\22\3\2\2\2\u008f\u0090\7t\2\2\u0090"+
		"\u0091\7g\2\2\u0091\u0092\7v\2\2\u0092\u0093\7w\2\2\u0093\u0094\7t\2\2"+
		"\u0094\u0095\7p\2\2\u0095\u0096\7u\2\2\u0096\24\3\2\2\2\u0097\u0098\7"+
		"}\2\2\u0098\26\3\2\2\2\u0099\u009a\7\177\2\2\u009a\30\3\2\2\2\u009b\u009c"+
		"\7.\2\2\u009c\32\3\2\2\2\u009d\u009e\7Y\2\2\u009e\u009f\7j\2\2\u009f\u00a0"+
		"\7g\2\2\u00a0\u00a1\7p\2\2\u00a1\34\3\2\2\2\u00a2\u00a3\7?\2\2\u00a3\36"+
		"\3\2\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6\7h\2\2\u00a6 \3\2\2\2\u00a7\u00a8"+
		"\7g\2\2\u00a8\u00a9\7n\2\2\u00a9\u00aa\7u\2\2\u00aa\u00ab\7g\2\2\u00ab"+
		"\"\3\2\2\2\u00ac\u00ad\7t\2\2\u00ad\u00ae\7g\2\2\u00ae\u00af\7r\2\2\u00af"+
		"\u00b0\7g\2\2\u00b0\u00b1\7c\2\2\u00b1\u00b2\7v\2\2\u00b2$\3\2\2\2\u00b3"+
		"\u00b4\7y\2\2\u00b4\u00b5\7j\2\2\u00b5\u00b6\7k\2\2\u00b6\u00b7\7n\2\2"+
		"\u00b7\u00b8\7g\2\2\u00b8&\3\2\2\2\u00b9\u00ba\7t\2\2\u00ba\u00bb\7g\2"+
		"\2\u00bb\u00bc\7v\2\2\u00bc\u00bd\7w\2\2\u00bd\u00be\7t\2\2\u00be\u00bf"+
		"\7p\2\2\u00bf(\3\2\2\2\u00c0\u00c1\7r\2\2\u00c1\u00c2\7t\2\2\u00c2\u00c3"+
		"\7k\2\2\u00c3\u00c4\7p\2\2\u00c4\u00c5\7v\2\2\u00c5\u00c6\7*\2\2\u00c6"+
		"*\3\2\2\2\u00c7\u00c8\7t\2\2\u00c8\u00c9\7w\2\2\u00c9\u00ca\7p\2\2\u00ca"+
		",\3\2\2\2\u00cb\u00cc\7V\2\2\u00cc\u00cd\7c\2\2\u00cd\u00ce\7p\2\2\u00ce"+
		"\u00cf\7m\2\2\u00cf\u00d0\7\60\2\2\u00d0.\3\2\2\2\u00d1\u00d2\7I\2\2\u00d2"+
		"\u00d3\7w\2\2\u00d3\u00d4\7p\2\2\u00d4\u00d5\7\60\2\2\u00d5\60\3\2\2\2"+
		"\u00d6\u00d7\7T\2\2\u00d7\u00d8\7c\2\2\u00d8\u00d9\7f\2\2\u00d9\u00da"+
		"\7c\2\2\u00da\u00db\7t\2\2\u00db\u00dc\7\60\2\2\u00dc\62\3\2\2\2\u00dd"+
		"\u00de\7D\2\2\u00de\u00df\7c\2\2\u00df\u00e0\7v\2\2\u00e0\u00e1\7v\2\2"+
		"\u00e1\u00e2\7n\2\2\u00e2\u00e3\7g\2\2\u00e3\u00e4\7h\2\2\u00e4\u00e5"+
		"\7k\2\2\u00e5\u00e6\7g\2\2\u00e6\u00e7\7n\2\2\u00e7\u00e8\7f\2\2\u00e8"+
		"\u00e9\7\60\2\2\u00e9\64\3\2\2\2\u00ea\u00eb\7O\2\2\u00eb\u00ec\7c\2\2"+
		"\u00ec\u00ed\7v\2\2\u00ed\u00ee\7j\2\2\u00ee\u00ef\7\60\2\2\u00ef\66\3"+
		"\2\2\2\u00f0\u00f1\7G\2\2\u00f1\u00f2\7x\2\2\u00f2\u00f3\7g\2\2\u00f3"+
		"\u00f4\7p\2\2\u00f4\u00f5\7v\2\2\u00f5\u00f6\7\60\2\2\u00f68\3\2\2\2\u00f7"+
		"\u00f8\7Q\2\2\u00f8\u00f9\7T\2\2\u00f9:\3\2\2\2\u00fa\u00fb\7C\2\2\u00fb"+
		"\u00fc\7P\2\2\u00fc\u00fd\7F\2\2\u00fd<\3\2\2\2\u00fe\u00ff\7K\2\2\u00ff"+
		"\u0100\7U\2\2\u0100\u0101\7?\2\2\u0101>\3\2\2\2\u0102\u0103\7P\2\2\u0103"+
		"\u0104\7Q\2\2\u0104\u0105\7V\2\2\u0105\u0106\7?\2\2\u0106@\3\2\2\2\u0107"+
		"\u0108\7@\2\2\u0108B\3\2\2\2\u0109\u010a\7>\2\2\u010aD\3\2\2\2\u010b\u010c"+
		"\7@\2\2\u010c\u010d\7?\2\2\u010dF\3\2\2\2\u010e\u010f\7>\2\2\u010f\u0110"+
		"\7?\2\2\u0110H\3\2\2\2\u0111\u0112\7-\2\2\u0112J\3\2\2\2\u0113\u0114\7"+
		"/\2\2\u0114L\3\2\2\2\u0115\u0116\7,\2\2\u0116N\3\2\2\2\u0117\u0118\7\61"+
		"\2\2\u0118P\3\2\2\2\u0119\u011a\7\'\2\2\u011aR\3\2\2\2\u011b\u011c\7#"+
		"\2\2\u011cT\3\2\2\2\u011d\u0121\t\2\2\2\u011e\u0120\t\3\2\2\u011f\u011e"+
		"\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122"+
		"V\3\2\2\2\u0123\u0121\3\2\2\2\u0124\u0126\t\4\2\2\u0125\u0124\3\2\2\2"+
		"\u0126\u0127\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u012f"+
		"\3\2\2\2\u0129\u012b\7\60\2\2\u012a\u012c\t\4\2\2\u012b\u012a\3\2\2\2"+
		"\u012c\u012d\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0130"+
		"\3\2\2\2\u012f\u0129\3\2\2\2\u012f\u0130\3\2\2\2\u0130X\3\2\2\2\u0131"+
		"\u0132\7H\2\2\u0132\u0133\7c\2\2\u0133\u0134\7n\2\2\u0134\u0135\7u\2\2"+
		"\u0135\u013b\7g\2\2\u0136\u0137\7V\2\2\u0137\u0138\7t\2\2\u0138\u0139"+
		"\7w\2\2\u0139\u013b\7g\2\2\u013a\u0131\3\2\2\2\u013a\u0136\3\2\2\2\u013b"+
		"Z\3\2\2\2\u013c\u0140\7$\2\2\u013d\u013f\n\5\2\2\u013e\u013d\3\2\2\2\u013f"+
		"\u0142\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0143\3\2"+
		"\2\2\u0142\u0140\3\2\2\2\u0143\u0144\7$\2\2\u0144\\\3\2\2\2\u0145\u0146"+
		"\7P\2\2\u0146\u0147\7w\2\2\u0147\u0153\7o\2\2\u0148\u0149\7D\2\2\u0149"+
		"\u014a\7q\2\2\u014a\u014b\7q\2\2\u014b\u0153\7n\2\2\u014c\u014d\7U\2\2"+
		"\u014d\u014e\7v\2\2\u014e\u014f\7t\2\2\u014f\u0150\7k\2\2\u0150\u0151"+
		"\7p\2\2\u0151\u0153\7i\2\2\u0152\u0145\3\2\2\2\u0152\u0148\3\2\2\2\u0152"+
		"\u014c\3\2\2\2\u0153^\3\2\2\2\u0154\u0155\7\61\2\2\u0155\u0156\7,\2\2"+
		"\u0156\u015a\3\2\2\2\u0157\u0159\n\6\2\2\u0158\u0157\3\2\2\2\u0159\u015c"+
		"\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c"+
		"\u015a\3\2\2\2\u015d\u015e\7,\2\2\u015e\u015f\7\61\2\2\u015f\u0160\3\2"+
		"\2\2\u0160\u0161\b\60\2\2\u0161`\3\2\2\2\u0162\u0163\t\7\2\2\u0163\u0164"+
		"\3\2\2\2\u0164\u0165\b\61\2\2\u0165b\3\2\2\2\13\2\u0121\u0127\u012d\u012f"+
		"\u013a\u0140\u0152\u015a\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}